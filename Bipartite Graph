import numpy as np


class KM_Algorithm:

    def __init__(self, Bipartite_Graph):
        self.Bipartite_Graph = Bipartite_Graph

        # Number of left and right nodes
        self.left = self.Bipartite_Graph.shape[0]  # Mainly on the left
        self.right = self.Bipartite_Graph.shape[1]

        # Initialize the top mark
        self.label_left = np.max(self.Bipartite_Graph,
                                 axis=1)  # Set the top mark on the left as the maximum weight (the maximum value of each line)
        self.label_right = np.zeros(self.right)  # The top mark of the collection on the right is set to 0

        # Initialize the auxiliary variable-whether it has been matched
        self.visit_left = np.zeros(self.left, dtype=bool)
        self.visit_right = np.zeros(self.right, dtype=bool)

        # Initialize the matching result on the right. If it is matched, it will correspond to the matching result
        self.match_right = np.empty(self.left) * np.nan

        # Record the minimum variable
        self.inc = 999999

    def match(self, boy):
        boy = int(boy)
        # Record this boy has been found
        self.visit_left[boy] = True
        for girl in range(self.right):
            # If this girl hasn't matched yet
            if not self.visit_right[girl]:
                gap = self.label_left[boy] + self.label_right[girl] - self.Bipartite_Graph[boy][girl]
                if gap == 0:  # # The difference is 0, which is a feasible replacement. So you can directly replace
                    self.visit_right[girl] = True

                    if np.isnan(self.match_right[girl]) or self.match(self.match_right[girl]):
                        self.match_right[girl] = boy
                        # Recursive matching, matching success
                        return 1

                # Find the gap with the smallest weight
                elif self.inc > gap:
                    self.inc = gap
        return 0

    def Kuh_Munkras(self):

        self.match_right = np.empty(self.left) * np.nan

        # find the perfect match
        for man in range(self.left):
            while True:
                self.inc = 999999  # the minimum gap
                self.reset()  # Every time I have searched for the path, all have to be reset

                # A feasible match can be found
                if self.match(man):
                    break

                for k in range(self.left):
                    if self.visit_left[k]:
                        self.label_left[k] -= self.inc
                for n in range(self.right):
                    if self.visit_right[n]:
                        self.label_right[n] += self.inc

    def calculateSum(self):
        sum = 0
        for i in range(self.left):
            sum += self.Bipartite_Graph[int(self.match_right[i])][i]
        return sum

    def getResult(self):
        return self.match_right

    def set_Bipartite_Graph(self, Bipartite_Graph):
        self.Bipartite_Graph = Bipartite_Graph

    def reset(self):
        # variable for record path
        self.visit_left = np.zeros(self.left, dtype=bool)
        self.visit_right = np.zeros(self.right, dtype=bool)


if __name__ == '__main__':

    sum = 0
    # Net = input("Please enter a bipartite graph in the form of a two-dimensional matrix:")
    Net = ''

    if Net == '':
        print("Start with default matrix")
        km = KM_Algorithm(Bipartite_Graph=np.array([[5, 9, 1], [10, 3, 2], [8, 7, 4]]))

    else:
        km = KM_Algorithm(np.array(Net))

    km.Kuh_Munkras()
    print('Maximum weight:')
    print(km.Bipartite_Graph)
    print(km.calculateSum())
